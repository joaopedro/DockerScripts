<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <!--==================  Internationalization  =====================-->
    <!-- Application Message Bundle -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basename" value="classpath:messages/messages" />
        <property name="cacheSeconds" value="0" />
    </bean>

    <!-- Configures Handler Interceptors -->    
    <mvc:interceptors>
        <!-- Changes the locale when a 'locale' request parameter is sent; e.g. /?locale=de -->
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
    </mvc:interceptors>

    <!-- Saves a locale change using a cookie -->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver" />

    <!-- Declared to spring inject applicationcontext -->
    <bean id="contextApplicationContextProvider" class="com.sinfic.ipdms.integration.spring.ApplicationContextProvider" />

    <context:annotation-config/>
    <!-- Scans the classpath of this application for @Components to deploy as beans -->
    <context:component-scan base-package="com.sinfic.agora.ocr" />
    
    <!-- Resolves view names to protected .jsp resources within the /WEB-INF/views directory -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:order="1">
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    
    <!-- Tiles view resolver.  Specified first because InternalResourceViewResolver will not work with 
    Tiles.  The "order" property is set with a value that dictates in what order the view resolver will
    be evaluated, the higher the order value the later the resolver is evaluated.  Below the InernalViewResolver 
    is used before the ResourceBundleViewResolver -->
    <bean id="tilesviewResolver" class="org.springframework.web.servlet.view.tiles2.TilesViewResolver" p:order="0"/>
    
    <!-- Tiles 2 configuration bean.  Initialises Tiles with the tiles configuration files -->
    <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
        <property name="definitions">
            <list>
                <value>/WEB-INF/tiles-definitions.xml</value>               
            </list>
        </property>
    </bean>

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />

    <!-- agoraConfig.properties -->
    <bean id="placeholderConfigMM" class="com.sinfic.agora.ocr.AgoraConfigProperties">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        <property name="locations">
        <list>
            <value>classpath:conf/agoraConfig.properties</value>
        </list>
        </property>
    </bean>

    <bean id="sequencesDAO" class="com.sinfic.agora.ocr.dao.SequencesDAOImpl" />
    <bean id="checkInDAO" class="com.sinfic.agora.ocr.dao.CheckInDAOImpl" />
    <bean id="documentTypeDAO" class="com.sinfic.agora.ocr.dao.DocumentTypeDAOImpl" />
    <bean id="documentTypeFieldsDAO" class="com.sinfic.agora.ocr.dao.DocumentTypeFieldsDAOImpl" />
    <bean id="documentTypeIdentifierDAO" class="com.sinfic.agora.ocr.dao.DocumentTypeIdentifierDAOImpl" />
    <bean id="processingDAO" class="com.sinfic.agora.ocr.dao.ProcessingDAOImpl" />
    <bean id="documentProcessingDAO" class="com.sinfic.agora.ocr.dao.DocumentProcessingDAOImpl" />
    <bean id="pageDocumentProcessingDAO" class="com.sinfic.agora.ocr.dao.PageDocumentProcessingDAOImpl" />
    <bean id="detailPageDocumentProcessingDAO" class="com.sinfic.agora.ocr.dao.DetailPageDocumentProcessingDAOImpl" />
    <bean id="versionProcessingDAO" class="com.sinfic.agora.ocr.dao.VersionProcessingDAOImpl" />
    <bean id="versionDocumentProcessingDAO" class="com.sinfic.agora.ocr.dao.VersionDocumentProcessingDAOImpl" />
    <bean id="versionPageDocumentProcessingDAO" class="com.sinfic.agora.ocr.dao.VersionPageDocumentProcessingDAOImpl" />
    <bean id="versionDetailPageDocumentProcessingDAO" class="com.sinfic.agora.ocr.dao.VersionDetailPageDocumentProcessingDAOImpl" />

    <tx:annotation-driven />
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

	<!-- Configures the @Controller programming model -->
	<mvc:annotation-driven />

	<!-- Forwards requests to the "/" resource to the view #######file/gridForm#######-->
	<mvc:view-controller path="/" view-name="layout/mainTemplate"/>

    <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources/ directory -->
    <mvc:resources mapping="/resources/**" location="/resources/" />

    <!-- Handles HTTP GET requests for /docs/** by efficiently serving up static docs in the ${uploadFile.location} directory -->
    <mvc:resources mapping="/docs/**" location="${uploadFile.location.resources}" />

    <!--==================  Quartz  =====================-->
    <!-- checkIn, run every 5 seconds (5000)-->
    <bean id="checkInTask" class="com.sinfic.agora.ocr.quartz.CheckInTask" />
    <bean name="checkInJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="com.sinfic.agora.ocr.quartz.CheckInJob" />
        <property name="jobDataAsMap"><map><entry key="checkInTask" value-ref="checkInTask" /></map></property>
    </bean>
    <bean id="checkInTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobDetail" ref="checkInJob" />
        <property name="repeatInterval" value="5000" />
        <property name="startDelay" value="10000" />
    </bean>
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers"><list><ref bean="checkInTrigger" /></list></property>
    </bean>
    <!-- tesseract, run every 1 minute (60000)-->
    <bean id="tesseractTask" class="com.sinfic.agora.ocr.quartz.TesseractTask" />
    <bean name="tesseractJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="com.sinfic.agora.ocr.quartz.TesseractJob" />
        <property name="jobDataAsMap"><map><entry key="tesseractTask" value-ref="tesseractTask" /></map></property>
    </bean>
    <bean id="tesseractTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobDetail" ref="tesseractJob" />
        <property name="repeatInterval" value="60000" />
    </bean>
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers"><list><ref bean="tesseractTrigger" /></list></property>
    </bean>

</beans>
